{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Comfy Tweaker <p>Comfy Tweaker is a ComfyUI companion app for generating massive amounts of images with precise, user-defined tweaks.</p> <p>It is ideal for:</p> <ul> <li>Running long queues of ComfyUI jobs</li> <li>Generating many variations of one workflow</li> <li>Large scale experiments of value tweaking, like optimizing LorA weights</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Easy to use workflow management interface</li> <li>Stop, re-order, and resume jobs during ComfyUI generation<ul> <li>Each workflow is queued only when the last one completes</li> <li>Stop and restart the queue whenever you feel like<ul> <li>Great for performing quick experiments while also running longer jobs</li> </ul> </li> <li>Run thousands of workflows with ease</li> </ul> </li> <li>Declarative yaml syntax for creating precise variations of your workflows<ul> <li>Supports the standard <code>{a|b}</code> wildcard syntax<ul> <li>Includes backrefs and customizable weights for precise control</li> </ul> </li> <li>Randomly generated values are baked into the image workflow<ul> <li>No more messing with random number nodes and text outputs</li> </ul> </li> <li>Load a random image or file from a folder</li> <li>Filter random selections by name or with regex patterns</li> </ul> </li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Download the latest .exe under releases.</p> <p>If you don't want to run the .exe or you are on Linux, you can install comfy-tweaker from source. <pre><code>git clone https://github.com/halkony/comfy-tweaker\ncd comfy-tweaker\npip install -r ./requirements/base.txt\npip install .\ncomfy-tweaker\n</code></pre></p> <p>Check out the quickstart guide in the docs to get started.</p>"},{"location":"#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Windows users should ensure that the paths in their tweaks files use forward slashes.</li> </ul>"},{"location":"errata/","title":"Errata","text":""},{"location":"errata/#why-do-i-have-to-specify-an-image-and-not-a-workflow-json","title":"Why do I have to specify an image and not a workflow JSON?","text":"<p>ComfyUI uses two JSON styles for managing workflows -- the visual workflow for use in the web UI and one the API workflow that the computer runs directly.</p> <p>Normally, workflows queued from other programs do not have the visual workflow attached to them. But ComfyTweaker uses a workaround that attaches it after generation. This requires both versions of the JSON, which are conveniently paired any workflow generated image.</p> <p>ComfyTweaker will eventually support import JSON workflows directly.</p>"},{"location":"errata/#when-i-move-to-front-the-numbers-change-but-the-job-doesnt-move","title":"When I move to front, the numbers change but the job doesn't move.","text":"<p>Either right click, Refresh or add another job to get it to update. This is a known bug.</p>"},{"location":"quickstart/","title":"Quickstart","text":"<p>Launch the UI by running the latest <code>comfy-tweaker.exe</code> from the releases page.</p> <p>Go to <code>Edit&gt;Preference</code> and set the ComfyUI folder to the root of your ComfyUI installation (the folder that contains both \"input\" and \"output\").</p> <p>Open an image in ComfyUI and note the id of the prompt node. Enable \"Node ID Badges\" in your ComfyUI settings if you haven't.</p> <p>Drag and drop the image into Comfy Tweaker.</p> <p>Create a yaml file and use the node id to define changes.</p> <p>For example, if the node id was 20, the following would change the text value of the node to \"an old man sitting on a bench\":</p> <pre><code>tweaks:\n    - selector:\n        id: \"20\"\n      changes:\n        text: \"An old man sitting on a bench.\"\n</code></pre> <p>Drag and drop this yaml file into Comfy Tweaker. Click <code>Add Job</code>, then click <code>Start</code>. When the job finishes, right click it in the list, then select <code>Go To Folder</code> to jump the output folder.</p> <p>The image should contain an old man sitting on a bench.</p> <p>You can save the tweaked workflow without generating it by clicking the <code>Save As...</code> button.</p> <p>You can also refer to a node by its name.</p> <p>For example, if your prompt node was named \"Positive Prompt\", this tweak would have the same effect:</p> <pre><code>tweaks:\n    - selector:\n        name: \"Positive Prompt\"\n      changes:\n        text: \"An old man sitting on a bench.\"\n</code></pre> <p>Usually the name of the change is the same as its placeholder text. If you don't see the name of the input you're trying to change, right click the node in ComfyUI and hover over \"Convert Widget to Input\". It should be there.</p>"},{"location":"quickstart/#random-values","title":"Random Values","text":"<p>Tweak files support an extended Jinja syntax for dynamically generated values.</p> <p>For example, the following tweak randomly sets the strength of \"Lora Loader 1\" between 0 and 1 every time the workflow runs. <pre><code>tweaks:\n    - selector:\n        name: \"Lora Loader 1\"\n      changes:\n        model_strength: {{ random_float(0, 1) }}\n</code></pre></p> <p>You can make a random choice from a list with <code>random_choice</code>. <pre><code>tweaks:\n    - selector:\n        name: \"Lora Loader 1\"\n      changes:\n        lora_name: {{ random_choice([\"lora1.safetensors\", \"lora2.safetensors\"]) }}\n</code></pre></p>"},{"location":"quickstart/#selecting-random-files","title":"Selecting Random Files","text":"<p>After setting your models folder under <code>Edit&gt;Preferences</code>, you can dynamically select files from it. The following tweak will select a random file in the lora models folder. <pre><code>tweaks:\n    - selector:\n        name: \"Lora Loader 1\"\n     changes:\n        lora_name: {{ from_models_folder(\"lora\") }}\n</code></pre></p> <p>By default, it only selects \".safetensors\" files, but it also supports other file patterns. The following would select a random \".pth\" file. <pre><code>tweaks:\n    - selector:\n        name: \"Lora Loader 1\"\n     changes:\n        lora_name: {{ from_models_folder(\"lora\", file_glob=\"*.pth\") }}\n</code></pre></p> <p>You can also specify an absolute path with the <code>from_folder</code> function.</p>"},{"location":"quickstart/#cycling-through-files","title":"Cycling through Files","text":"<p>You can cycle through the files in a folder using the cycle keyword argument. The following example would use the next LorA in the folder every time the workflow runs. <pre><code>tweaks:\n    - selector:\n        name: \"Lora Loader 1\"\n     changes:\n        lora_name: {{ from_models_folder(\"lora\", cycle=True) }}\n</code></pre></p>"},{"location":"quickstart/#reusing-random-values","title":"Reusing Random Values","text":"<p>You can use Jinja variables to reuse any generated values. The following example would use the same weight for boths LorAs. <pre><code>{% set random_value = random_int(0, 100) %}\ntweaks:\n    - selector:\n        name: \"Lora Loader 1\"\n      changes:\n        strength: {{ random_value }}\n    - selector:\n        name: \"Lora Loader 2\"\n      changes:\n        strength: {{ random_value }}\n</code></pre></p> <p>This is useful for naming outputs while cycling through files. The following example would include the lora name in the workflow output. <pre><code>{% set lora_name = from_models_folder(\"lora\", cycle=True) %}\ntweaks:\n    - selector:\n        name: \"Lora Loader 1\"\n      changes:\n        lora_name: {{ lora_name }}\n    - selector:\n        name: \"Save Image\"\n      changes:\n        prefix: \"Output_{{ lora_name }}_Image\"\"\n</code></pre></p> <p>It's important to set a variable if you want to reuse a cycled value. Calling a cycling function again in the same tweak file will produce the next value, which is not recommended.</p>"},{"location":"quickstart/#filtering-by-name","title":"Filtering By Name","text":"<p>To filter a random selection by its contents, use the <code>match</code> or <code>regex_match</code> keyword argument. The following example would select a random lora with the word \"cartoon\" in it.</p> <pre><code>tweaks:\n    - selector:\n        name: \"Lora Loader 1\"\n     changes:\n        lora_name: {{ from_models_folder(\"lora\", match=\"cartoon\") }}\n</code></pre>"},{"location":"quickstart/#loading-images","title":"Loading Images","text":"<p>After you've set your ComfyUI folder in <code>Edit&gt;Preferences</code>, you can load an image using the <code>as_image</code> Jinja filter and an absolute path to the image.</p> <p>For example, this tweak would select a random depth map from a folder. <pre><code>tweaks:\n    - selector:\n        name: \"Depth Map Image\"\n     changes:\n        image: {{ from_folder_absolute(\"/path/to/depth/images\") | as_image }}\n</code></pre></p> <p>This copies the image into your inputs folder and returns its filename, which is what ComfyUI expects. Every time it is evaluated, it will copy the image to the inputs folder, so be mindful when working with large images.</p>"},{"location":"quickstart/#wildcards","title":"Wildcards","text":"<p>Comfy Tweaker supports standard stable diffusion wildcards. You can set your wildcards directory in <code>Edit&gt;Preferences</code>.</p> <p>The following tweak would either set the prompt to \"human\" or an entry from the \"animals.txt\" file in your wildcards directory. <pre><code>tweaks:\n    - selector:\n        name: \"Positive Prompt\"\n     changes:\n        value: {{ \"a {human|__animals__} wearing a baseball cap\" | wildcards }}\n</code></pre></p>"},{"location":"quickstart/#backrefs","title":"Backrefs","text":"<p>If you want to reuse a wildcard later in the prompt, you can use the <code>@</code> backref notation.</p> <p>For example, any wildcard whose contents end with <code>@animal</code> can be referred to with <code>{@animal}</code> later in the text. The following would produce a prompt describing two of the same animal.</p> <pre><code>tweaks:\n    - selector:\n        name: \"Positive Prompt\"\n     changes:\n        value: {{ \"a {bear|cat|dog@animal} wearing a baseball cap and another {@animal} wearing a cowboy hat\" | wildcards }}\n</code></pre>"},{"location":"quickstart/#custom-weights","title":"Custom Weights","text":"<p>You can specify the weights of each wildcard entry using the <code>::</code> syntax.</p> <p>The weights are normalized and do not need to add up to one. For example, the following tweak would select human 2 times, koala 3 times, and bear 5 times for every 10 generations of the prompt. <pre><code>tweaks:\n    - selector:\n        name: \"Positive Prompt\"\n     changes:\n        value: {{ \"a {human::2|koala::3|bear::5} wearing a baseball cap\" | wildcards }}\n</code></pre></p> <p>The weights only influence the random selection of the wildcard, so a perfect ratio of selection is not guaranteed.</p>"},{"location":"reference/tweak_files/","title":"Tweak Files","text":"<p>Tweak files define the changes made to a workflow before it runs. They are stored in a yaml format.</p> <p>The following tweaks would change the \"description\" and \"strength\" values the node with ID 12 and the \"text\" value of the node named \"Positive Prompt\". These changes are applied directly before the workflow runs. <pre><code>tweaks:\n    - selector:\n        id: \"12\"\n      changes:\n        description: \"This is the new value\"\n        strength: 2\n    - selector:\n        name: \"Positive Prompt\"\n      changes:\n        text: \"A giraffe wearing a hat\"\n</code></pre></p> <p>Each tweak is defined under <code>tweaks</code>. Each item in tweak should have a <code>selector</code> and <code>changes</code>.</p> <p>A selector expects the <code>id</code> of the node or the <code>name</code> of the node, but not both. As of right now, you cannot use a selector that would match to more than one node in a workflow.</p> <p>Any values under <code>changes</code> will be applied to the workflow when it is run with Comfy Tweaker. These changes are preserved when you drag and drop the resulting image into ComfyUI. If you press <code>Save As...</code> in the GUI, you can save the workflow JSON directly.</p>"},{"location":"reference/tweak_files/#filters","title":"Filters","text":""},{"location":"reference/tweak_files/#comfy_tweaker.filters.as_image","title":"<code>as_image(absolute_file_path)</code>","text":"<p>Moves an image into the comfyui input folder and returns its final name. This is useful for providing image inputs like depth maps and canny outlines. In the input folder, the image will have its original filename appended with an MD5 hash so it is easily referenced.</p> <p>Example: <pre><code>tweaks:\n- selector:\n    id: \"12\"\n    changes:\n    image: {{ from_folder_absolute(\"/path/to/images\", \"*.png\") | as_image }}\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>absolute_file_path</code> <code>str</code> <p>The absolute file path to an image (e.g. .png, .webp).</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the COMFYUI_INPUT_FOLDER environment variable is not set.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The name of the image in the top level of the comfyui inputs directory.</p> Source code in <code>comfy_tweaker\\filters.py</code> <pre><code>def as_image(absolute_file_path):\n    \"\"\"\n    Moves an image into the comfyui input folder and returns its final name. This is useful for providing image inputs like depth maps and canny outlines. In the input folder, the image will have its original filename appended with an MD5 hash so it is easily referenced.\n\n    Example:\n    ```yaml\n    tweaks:\n    - selector:\n        id: \"12\"\n        changes:\n        image: {{ from_folder_absolute(\"/path/to/images\", \"*.png\") | as_image }}\n    ```\n\n    Args:\n        absolute_file_path (str): The absolute file path to an image (e.g. *.png, *.webp).\n\n    Raises:\n        ValueError: If the COMFYUI_INPUT_FOLDER environment variable is not set.\n\n    Returns:\n        str: The name of the image in the top level of the comfyui inputs directory.\n    \"\"\"\n    comfyui_input_folder = os.getenv(\"COMFYUI_INPUT_FOLDER\")\n    if not comfyui_input_folder:\n        raise ValueError(\"COMFYUI_INPUT_FOLDER environment variable is not set\")\n\n    image_folder = os.path.join(comfyui_input_folder)\n    os.makedirs(image_folder, exist_ok=True)\n    image = Image.open(absolute_file_path)\n    image_bytes = image.tobytes()\n    image_hash = hashlib.md5(image_bytes).hexdigest()\n    image_name = f\"{os.path.basename(absolute_file_path)}-{image_hash}.png\"\n    final_output_path = os.path.join(image_folder, image_name)\n    if not os.path.exists(final_output_path):\n        image.save(final_output_path)\n    return os.path.relpath(final_output_path, comfyui_input_folder)\n</code></pre>"},{"location":"reference/tweak_files/#comfy_tweaker.filters.from_file","title":"<code>from_file(file_path)</code>","text":"<p>Returns the text contents of a file.</p> <p>Example: <pre><code>tweaks:\n- selector:\n    id: \"12\"\n  changes:\n    text: {{ from_file(\"/path/to/file.txt\") }}\n</code></pre></p> <p>If the text file contains newlines, the following is preferred for easier yaml parsing. The bar yaml syntax is useful for text files that may contain colons as they otherwise generate a parsing error.</p> <pre><code>tweaks:\n- selector:\n    name: \"Positive Prompt\"\n  changes:\n    value: |\n    {{ from_file_in_folder(\"/path/to/folder\") | replace('\\n', ' ') }}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>The path to the file.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The contents of the file.</p> Source code in <code>comfy_tweaker\\filters.py</code> <pre><code>def from_file(file_path):\n    \"\"\"\n    Returns the text contents of a file.\n\n    Example:\n    ```yaml\n    tweaks:\n    - selector:\n        id: \"12\"\n      changes:\n        text: {{ from_file(\"/path/to/file.txt\") }}\n    ```\n\n    If the text file contains newlines, the following is preferred for easier yaml parsing. The bar yaml syntax is useful for text files that may contain colons as they otherwise generate a parsing error.\n\n    ```yaml\n    tweaks:\n    - selector:\n        name: \"Positive Prompt\"\n      changes:\n        value: |\n        {{ from_file_in_folder(\"/path/to/folder\") | replace('\\\\n', ' ') }}\n    ```\n\n    Args:\n        file_path (str): The path to the file.\n\n    Returns:\n        str: The contents of the file.\n    \"\"\"\n    with open(file_path) as file:\n        return file.read()\n</code></pre>"},{"location":"reference/tweak_files/#comfy_tweaker.filters.from_file_in_folder","title":"<code>from_file_in_folder(folder, file_glob='*.txt', match=None, regex_match=None, cycle=False)</code>","text":"<p>Returns the contents of a random file in the specified folder, matching the glob pattern.</p> <p><pre><code>tweaks:\n- selector:\n    name: \"Positive Prompt\"\n  changes:\n    text: {{ from_file_in_folder(\"/path/to/folder\", cycle=True) }}\n</code></pre> Args:     folder (str): The folder to search in.     file_glob (str, optional): The glob pattern to match. Defaults to \"*.txt\".     match (str, optional): The substring pattern to match. Defaults to None.     regex_match (str, optional): The regex pattern to match. Defaults to None.     cycle (bool, optional): Cycle through the files in the folder instead of making a random selection. Defaults to False.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The contents of the randomly chosen file.</p> Source code in <code>comfy_tweaker\\filters.py</code> <pre><code>def from_file_in_folder(\n    folder, file_glob=\"*.txt\", match=None, regex_match=None, cycle=False\n):\n    \"\"\"\n    Returns the contents of a random file in the specified folder, matching the glob pattern.\n\n    ```yaml\n    tweaks:\n    - selector:\n        name: \"Positive Prompt\"\n      changes:\n        text: {{ from_file_in_folder(\"/path/to/folder\", cycle=True) }}\n    ```\n    Args:\n        folder (str): The folder to search in.\n        file_glob (str, optional): The glob pattern to match. Defaults to \"*.txt\".\n        match (str, optional): The substring pattern to match. Defaults to None.\n        regex_match (str, optional): The regex pattern to match. Defaults to None.\n        cycle (bool, optional): Cycle through the files in the folder instead of making a random selection. Defaults to False.\n\n    Returns:\n        str: The contents of the randomly chosen file.\n    \"\"\"\n    path = from_folder_absolute(folder, file_glob, match, regex_match, cycle)\n    return from_file(path)\n</code></pre>"},{"location":"reference/tweak_files/#comfy_tweaker.filters.from_folder","title":"<code>from_folder(folder, file_glob='*.safetensors', match=None, regex_match=None, cycle=False)</code>","text":"<p>Returns a random choice from a folder that matches the glob pattern. Returns only the basename of the file.</p> <p>Parameters:</p> Name Type Description Default <code>folder</code> <code>str</code> <p>The folder to search in.</p> required <code>file_glob</code> <code>str</code> <p>The glob pattern to match. Defaults to \"*.safetensors\".</p> <code>'*.safetensors'</code> <code>match</code> <code>str</code> <p>The substring pattern to match. Defaults to None.</p> <code>None</code> <code>regex_match</code> <code>str</code> <p>The regex pattern to match. Defaults to None.</p> <code>None</code> <code>cycle</code> <code>bool</code> <p>Cycle through the files in the folder instead of making a random selection. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The base name of the randomly chosen file.</p> Source code in <code>comfy_tweaker\\filters.py</code> <pre><code>def from_folder(\n    folder, file_glob=\"*.safetensors\", match=None, regex_match=None, cycle=False\n):\n    \"\"\"\n    Returns a random choice from a folder that matches the glob pattern. Returns only the basename of the file.\n\n    Args:\n        folder (str): The folder to search in.\n        file_glob (str, optional): The glob pattern to match. Defaults to \"*.safetensors\".\n        match (str, optional): The substring pattern to match. Defaults to None.\n        regex_match (str, optional): The regex pattern to match. Defaults to None.\n        cycle (bool, optional): Cycle through the files in the folder instead of making a random selection. Defaults to False.\n\n    Returns:\n        str: The base name of the randomly chosen file.\n    \"\"\"\n    return _fetch_cycleable_file(\n        in_folder, folder, file_glob, match, regex_match, cycle\n    )\n</code></pre>"},{"location":"reference/tweak_files/#comfy_tweaker.filters.from_folder_absolute","title":"<code>from_folder_absolute(folder, file_glob='*.safetensors', match=None, regex_match=None, cycle=False)</code>","text":"<p>Returns a random choice from a folder that matches the glob pattern. Same as <code>from_folder</code> but returns the absolute path to the file.</p> <p>Parameters:</p> Name Type Description Default <code>folder</code> <code>str</code> <p>The folder to search in.</p> required <code>file_glob</code> <code>str</code> <p>The glob pattern to match. Defaults to \"*.safetensors\".</p> <code>'*.safetensors'</code> <code>match</code> <code>str</code> <p>The substring pattern to match. Defaults to None.</p> <code>None</code> <code>regex_match</code> <code>str</code> <p>The regex pattern to match. Defaults to None.</p> <code>None</code> <code>cycle</code> <code>bool</code> <p>Cycle through the files in the folder instead of making a random selection. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The absolute path to the randomly chosen file.</p> Source code in <code>comfy_tweaker\\filters.py</code> <pre><code>def from_folder_absolute(\n    folder, file_glob=\"*.safetensors\", match=None, regex_match=None, cycle=False\n):\n    \"\"\"\n    Returns a random choice from a folder that matches the glob pattern. Same as `from_folder` but returns the absolute path to the file.\n\n    Args:\n        folder (str): The folder to search in.\n        file_glob (str, optional): The glob pattern to match. Defaults to \"*.safetensors\".\n        match (str, optional): The substring pattern to match. Defaults to None.\n        regex_match (str, optional): The regex pattern to match. Defaults to None.\n        cycle (bool, optional): Cycle through the files in the folder instead of making a random selection. Defaults to False.\n\n    Returns:\n        str: The absolute path to the randomly chosen file.\n    \"\"\"\n    return _fetch_cycleable_file(\n        in_folder_absolute, folder, file_glob, match, regex_match, cycle\n    )\n</code></pre>"},{"location":"reference/tweak_files/#comfy_tweaker.filters.from_models_folder","title":"<code>from_models_folder(folder, file_glob='*.safetensors', match=None, regex_match=None, cycle=False)</code>","text":"<p>Returns a random choice from the specified folder in the ComfyUI models folder. Only returns the base name.</p> <p>Example: <pre><code>tweaks:\n- selector:\n    name: \"Lora Loader 1\"\n  changes:\n    lora_name: {{ from_models_folder(\"lora\") }}\n</code></pre> Args:     folder (str): The folder to search in.     file_glob (str, optional): The glob pattern to match. Defaults to \"*.safetensors\".     match (str, optional): The substring pattern to match. Defaults to None.     regex_match (str, optional): The regex pattern to match. Defaults to None.     cycle (bool, optional): Cycle through the files in the folder instead of making a random selection. Defaults to False.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The base name of the randomly chosen file.</p> Source code in <code>comfy_tweaker\\filters.py</code> <pre><code>def from_models_folder(\n    folder, file_glob=\"*.safetensors\", match=None, regex_match=None, cycle=False\n):\n    \"\"\"\n    Returns a random choice from the specified folder in the ComfyUI models folder. Only returns the base name.\n\n    Example:\n    ```yaml\n    tweaks:\n    - selector:\n        name: \"Lora Loader 1\"\n      changes:\n        lora_name: {{ from_models_folder(\"lora\") }}\n    ```\n    Args:\n        folder (str): The folder to search in.\n        file_glob (str, optional): The glob pattern to match. Defaults to \"*.safetensors\".\n        match (str, optional): The substring pattern to match. Defaults to None.\n        regex_match (str, optional): The regex pattern to match. Defaults to None.\n        cycle (bool, optional): Cycle through the files in the folder instead of making a random selection. Defaults to False.\n\n    Returns:\n        str: The base name of the randomly chosen file.\n    \"\"\"\n    return _fetch_cycleable_file(\n        in_models_folder, folder, file_glob, match, regex_match, cycle\n    )\n</code></pre>"},{"location":"reference/tweak_files/#comfy_tweaker.filters.in_folder","title":"<code>in_folder(folder, file_glob='*.safetensors')</code>","text":"<p>Returns a list of files in a folder that match the glob pattern, including subdirectories. The results are the paths relative to the folder.</p> <p>Parameters:</p> Name Type Description Default <code>folder</code> <code>str</code> <p>The folder to search in.</p> required <code>file_glob</code> <code>str</code> <p>The glob pattern to match. Defaults to \"*.safetensors\".</p> <code>'*.safetensors'</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of files with their base names.</p> Source code in <code>comfy_tweaker\\filters.py</code> <pre><code>def in_folder(folder, file_glob=\"*.safetensors\"):\n    \"\"\"\n    Returns a list of files in a folder that match the glob pattern, including subdirectories. The results are the paths relative to the folder.\n\n    Args:\n        folder (str): The folder to search in.\n        file_glob (str, optional): The glob pattern to match. Defaults to \"*.safetensors\".\n\n    Returns:\n        list: A list of files with their base names.\n    \"\"\"\n    return [\n        os.path.relpath(file, folder)\n        for file in glob.glob(os.path.join(folder, \"**\", file_glob), recursive=True)\n    ]\n</code></pre>"},{"location":"reference/tweak_files/#comfy_tweaker.filters.in_folder_absolute","title":"<code>in_folder_absolute(folder, file_glob='*.safetensors')</code>","text":"<p>Returns a list of files in a folder that match the glob pattern. Recurses through subdirectories. Same as <code>in_folder</code>, but returns the full paths.</p> <p>Parameters:</p> Name Type Description Default <code>folder</code> <code>str</code> <p>The folder to search in.</p> required <code>file_glob</code> <code>str</code> <p>The glob pattern to match. Defaults to \"*.safetensors\".</p> <code>'*.safetensors'</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of files with their full paths.</p> Source code in <code>comfy_tweaker\\filters.py</code> <pre><code>def in_folder_absolute(folder, file_glob=\"*.safetensors\"):\n    \"\"\"\n    Returns a list of files in a folder that match the glob pattern. Recurses through subdirectories. Same as `in_folder`, but returns the full paths.\n\n    Args:\n        folder (str): The folder to search in.\n        file_glob (str, optional): The glob pattern to match. Defaults to \"*.safetensors\".\n\n    Returns:\n        list: A list of files with their full paths.\n    \"\"\"\n    return [\n        file\n        for file in glob.glob(os.path.join(folder, \"**\", file_glob), recursive=True)\n    ]\n</code></pre>"},{"location":"reference/tweak_files/#comfy_tweaker.filters.in_models_folder","title":"<code>in_models_folder(folder, file_glob='*.safetensors')</code>","text":"<p>Returns a list of files that are in the specified folder of the models directory. Returns only the base name of the file.</p> <p>Parameters:</p> Name Type Description Default <code>folder</code> <code>str</code> <p>The folder to search in.</p> required <code>file_glob</code> <code>str</code> <p>The glob pattern to match. Defaults to \"*.safetensors\".</p> <code>'*.safetensors'</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the MODELS_FOLDER environment variable is not set.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of files with their base names.</p> Source code in <code>comfy_tweaker\\filters.py</code> <pre><code>def in_models_folder(folder, file_glob=\"*.safetensors\"):\n    \"\"\"\n    Returns a list of files that are in the specified folder of the models directory. Returns only the base name of the file.\n\n    Args:\n        folder (str): The folder to search in.\n        file_glob (str, optional): The glob pattern to match. Defaults to \"*.safetensors\".\n\n    Raises:\n        ValueError: If the MODELS_FOLDER environment variable is not set.\n\n    Returns:\n        list: A list of files with their base names.\n    \"\"\"\n    models_folder = os.getenv(\"MODELS_FOLDER\")\n    if not models_folder:\n        raise ValueError(\"MODELS_FOLDER environment variable is not set\")\n    folder = os.path.join(models_folder, folder)\n    return in_folder(folder, file_glob)\n</code></pre>"},{"location":"reference/tweak_files/#comfy_tweaker.filters.match","title":"<code>match(text, pattern)</code>","text":"<p>Filters a list to all the elements containing the pattern as a substring.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>list</code> <p>The list of strings to filter.</p> required <code>pattern</code> <code>str</code> <p>The substring pattern to match.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list of elements containing the pattern.</p> Source code in <code>comfy_tweaker\\filters.py</code> <pre><code>def match(text, pattern):\n    \"\"\"\n    Filters a list to all the elements containing the pattern as a substring.\n\n    Args:\n        text (list): The list of strings to filter.\n        pattern (str): The substring pattern to match.\n\n    Returns:\n        list: A list of elements containing the pattern.\n    \"\"\"\n    return match_(text, pattern)\n</code></pre>"},{"location":"reference/tweak_files/#comfy_tweaker.filters.random_choice","title":"<code>random_choice(choices)</code>","text":"<p>Returns a random choice from the list of choices.</p> <p>Parameters:</p> Name Type Description Default <code>choices</code> <code>list</code> <p>The list of choices.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <p>A randomly chosen element from the list.</p> Source code in <code>comfy_tweaker\\filters.py</code> <pre><code>def random_choice(choices):\n    \"\"\"\n    Returns a random choice from the list of choices.\n\n    Args:\n        choices (list): The list of choices.\n\n    Returns:\n        Any: A randomly chosen element from the list.\n    \"\"\"\n    return random.choice(choices)\n</code></pre>"},{"location":"reference/tweak_files/#comfy_tweaker.filters.random_float","title":"<code>random_float(min_value, max_value)</code>","text":"<p>Returns a random float from min_value to max_value, inclusive.</p> <p>Parameters:</p> Name Type Description Default <code>min_value</code> <code>float</code> <p>The minimum value.</p> required <code>max_value</code> <code>float</code> <p>The maximum value.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>A random float between min_value and max_value.</p> Source code in <code>comfy_tweaker\\filters.py</code> <pre><code>def random_float(min_value, max_value):\n    \"\"\"\n    Returns a random float from min_value to max_value, inclusive.\n\n    Args:\n        min_value (float): The minimum value.\n        max_value (float): The maximum value.\n\n    Returns:\n        float: A random float between min_value and max_value.\n    \"\"\"\n    return random.uniform(min_value, max_value)\n</code></pre>"},{"location":"reference/tweak_files/#comfy_tweaker.filters.random_int","title":"<code>random_int(min_value, max_value)</code>","text":"<p>Returns a random integer from min_value to max_value, inclusive.</p> <p>Parameters:</p> Name Type Description Default <code>min_value</code> <code>int</code> <p>The minimum value.</p> required <code>max_value</code> <code>int</code> <p>The maximum value.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>A random integer between min_value and max_value.</p> Source code in <code>comfy_tweaker\\filters.py</code> <pre><code>def random_int(min_value, max_value):\n    \"\"\"\n    Returns a random integer from min_value to max_value, inclusive.\n\n    Args:\n        min_value (int): The minimum value.\n        max_value (int): The maximum value.\n\n    Returns:\n        int: A random integer between min_value and max_value.\n\n    \"\"\"\n    return random.randint(min_value, max_value)\n</code></pre>"},{"location":"reference/tweak_files/#comfy_tweaker.filters.random_seed","title":"<code>random_seed()</code>","text":"<p>Returns a random seed, which is an integer between 0 and 1125899906842624 inclusive.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>A random seed.</p> Source code in <code>comfy_tweaker\\filters.py</code> <pre><code>def random_seed():\n    \"\"\"\n    Returns a random seed, which is an integer between 0 and 1125899906842624 inclusive.\n\n    Returns:\n        int: A random seed.\n    \"\"\"\n    return random.randint(0, 1125899906842624)\n</code></pre>"},{"location":"reference/tweak_files/#comfy_tweaker.filters.regex_match","title":"<code>regex_match(text, pattern)</code>","text":"<p>Filters a list to all the elements matching the regex pattern.</p> <p>Example: <pre><code>tweaks:\n- selector:\n    id: \"12\"\n  changes:\n    lora_name: {{ random_choice(in_models_folder(\"lora\") | regex_match(\".*?cartoon.*?\")) }}\n</code></pre> Args:     text (list): The list of strings to filter.     pattern (str): The regex pattern to match.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of elements matching the regex pattern.</p> Source code in <code>comfy_tweaker\\filters.py</code> <pre><code>def regex_match(text, pattern):\n    \"\"\"\n    Filters a list to all the elements matching the regex pattern.\n\n    Example:\n    ```yaml\n    tweaks:\n    - selector:\n        id: \"12\"\n      changes:\n        lora_name: {{ random_choice(in_models_folder(\"lora\") | regex_match(\".*?cartoon.*?\")) }}\n    ```\n    Args:\n        text (list): The list of strings to filter.\n        pattern (str): The regex pattern to match.\n\n    Returns:\n        list: A list of elements matching the regex pattern.\n    \"\"\"\n    return regex_match_(text, pattern)\n</code></pre>"},{"location":"reference/tweak_files/#comfy_tweaker.filters.wildcards","title":"<code>wildcards(text)</code>","text":"<p>Replaces stable diffusion style wildcards within a piece of text. The directory for file wildcards is in the environment variable <code>WILDCARDS_DIRECTORY</code>, which you can set under <code>Edit&gt;Preferences</code> in the UI.</p> <p>Example: <pre><code>tweaks:\n- selector:\n    id: \"12\"\n  changes:\n    text: {{ \"a {dog|cat} wearing a hat\" | wildcards }}\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text containing wildcards.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The text with wildcards replaced.</p> Source code in <code>comfy_tweaker\\filters.py</code> <pre><code>def wildcards(text):\n    \"\"\"\n    Replaces stable diffusion style wildcards within a piece of text. The directory for file wildcards is in the environment variable `WILDCARDS_DIRECTORY`, which you can set under `Edit&gt;Preferences` in the UI.\n\n    Example:\n    ```yaml\n    tweaks:\n    - selector:\n        id: \"12\"\n      changes:\n        text: {{ \"a {dog|cat} wearing a hat\" | wildcards }}\n    ```\n\n    Args:\n        text (str): The text containing wildcards.\n\n    Returns:\n        str: The text with wildcards replaced.\n    \"\"\"\n    processor = WildcardProcessor(directory=os.getenv(\"WILDCARDS_DIRECTORY\"))\n    return processor.process(text)\n</code></pre>"}]}